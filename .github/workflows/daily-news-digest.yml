name: ü§ñ AI-Powered Daily News Digest & Website

on:
  schedule:
    # Run daily at 5:00 AM UTC (6:00 AM BST / 5:00 AM GMT)
    # This ensures 6 AM UK time during British Summer Time
    - cron: '0 5 * * *'
  push:
    branches: [ main ]  # Trigger on main branch pushes for development
    paths:
      - 'docs/**'
      - '*.py'
      - 'requirements.txt'
      - '.github/workflows/**'
  workflow_dispatch: # Allow manual triggering
    inputs:
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean
      force_ai_regeneration:
        description: 'Force AI analysis even if today content exists (costs API credits)'
        required: false
        default: false
        type: boolean
      deploy_only:
        description: 'Skip AI generation, just redeploy existing content'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate-ai-digest:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
      issues: write  # For creating issues on failures
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main  # Develop and deploy from main branch
        token: ${{ secrets.GITHUB_TOKEN }}
        lfs: true  # Enable Git LFS checkout
    
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install anthropic  # AI provider for news analysis
    
    - name: üîç Check if today's content exists
      id: check_content
      run: |
        TODAY=$(date +%Y_%m_%d)
        # Check for content in all supported languages (including cities)
        LANGUAGES=("en_GB" "fr_FR" "de_DE" "es_ES" "it_IT" "nl_NL" "en_GB_LON" "en_GB_LIV")
        ALL_EXIST=true
        
        for LANG in "${LANGUAGES[@]}"; do
          AUDIO_FILE="docs/${LANG}/audio/news_digest_ai_${TODAY}.mp3"
          TEXT_FILE="docs/${LANG}/news_digest_ai_${TODAY}.txt"
          
          # Check if files exist AND audio file has reasonable size (>50KB)
          if [[ -f "$AUDIO_FILE" && -f "$TEXT_FILE" ]]; then
            AUDIO_SIZE=$(stat -c%s "$AUDIO_FILE" 2>/dev/null || echo "0")
            if [[ $AUDIO_SIZE -gt 50000 ]]; then
              echo "‚úÖ ${LANG} content exists and valid: $AUDIO_FILE ($(numfmt --to=iec $AUDIO_SIZE)), $TEXT_FILE"
            else
              echo "‚ö†Ô∏è ${LANG} audio file too small (${AUDIO_SIZE} bytes) - needs regeneration"
              ALL_EXIST=false
            fi
          else
            echo "üìù ${LANG} content missing:"
            [[ ! -f "$AUDIO_FILE" ]] && echo "   ‚ùå Missing: $AUDIO_FILE"
            [[ ! -f "$TEXT_FILE" ]] && echo "   ‚ùå Missing: $TEXT_FILE"
            ALL_EXIST=false
          fi
        done
        
        if [[ "$ALL_EXIST" == "true" ]]; then
          echo "content_exists=true" >> $GITHUB_OUTPUT
          echo "üåç All language content exists for today"
        else
          echo "content_exists=false" >> $GITHUB_OUTPUT
          echo "üåç Some language content missing - will generate"
        fi
        
        echo "today_date=$TODAY" >> $GITHUB_OUTPUT
    
    - name: ü§ñ Generate AI-Enhanced News Digest
      # CRITICAL: Only run AI generation if content doesn't exist OR explicitly forced
      # This prevents unnecessary API costs on push events
      if: steps.check_content.outputs.content_exists == 'false' || inputs.force_ai_regeneration == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "üöÄ Push-triggered build: Deploying UX improvements..."
          echo "üí∞ Cost optimization: Will only generate AI content if missing"
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          echo "‚è∞ Scheduled build: Daily news digest generation..."
          echo "üí∞ This step uses API credits - content_exists: ${{ steps.check_content.outputs.content_exists }}"
        else
          echo "üîß Manual workflow: Custom parameters applied"
          echo "üí∞ This step uses API credits - content_exists: ${{ steps.check_content.outputs.content_exists }}"
        fi
        # Generate content for all supported languages with better error handling (including cities)
        CORE_LANGUAGES=("en_GB" "fr_FR" "de_DE")  # Original languages that must succeed
        NEW_LANGUAGES=("es_ES" "it_IT" "nl_NL" "en_GB_LON" "en_GB_LIV")  # New languages (optional)
        FAILED_LANGUAGES=()
        SUCCESS_COUNT=0
        CORE_SUCCESS_COUNT=0
        
        # Process core languages first (critical for service)
        echo "üéØ PHASE 1: Generating CORE languages (required for service)"
        for LANG in "${CORE_LANGUAGES[@]}"; do
          echo "üåç Generating content for ${LANG}..."
          echo "‚è∞ Started at: $(date)"
          
          # Run with timeout and capture exit code
          set +e  # Don't exit on error
          timeout 300 python github_ai_news_digest.py --language ${LANG}
          EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "‚è∞ Completed at: $(date)"
          echo "üîç Exit code: ${EXIT_CODE}"
          
          # Check exit code
          if [ $EXIT_CODE -eq 124 ]; then
            echo "‚è∞ ${LANG} generation timed out after 5 minutes"
            FAILED_LANGUAGES+=("${LANG} (timeout)")
          elif [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå ${LANG} generation failed with exit code ${EXIT_CODE}"
            FAILED_LANGUAGES+=("${LANG} (exit ${EXIT_CODE})")
          else
            # Check if files were actually created
            TODAY=$(date +%Y_%m_%d)
            AUDIO_FILE="docs/${LANG}/audio/news_digest_ai_${TODAY}.mp3"
            TEXT_FILE="docs/${LANG}/news_digest_ai_${TODAY}.txt"
            
            if [[ -f "$AUDIO_FILE" && -f "$TEXT_FILE" ]]; then
              echo "‚úÖ ${LANG} generation successful"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              CORE_SUCCESS_COUNT=$((CORE_SUCCESS_COUNT + 1))
            else
              echo "‚ö†Ô∏è ${LANG} generation completed but files missing"
              FAILED_LANGUAGES+=("${LANG} (no files)")
            fi
          fi
          
          echo "---"
        done
        
        # Check if core languages succeeded before proceeding
        if [ $CORE_SUCCESS_COUNT -eq ${#CORE_LANGUAGES[@]} ]; then
          echo "‚úÖ All core languages successful - proceeding with new languages"
          echo "üéØ PHASE 2: Generating NEW languages (optional)"
          
          for LANG in "${NEW_LANGUAGES[@]}"; do
            echo "üåç Generating content for ${LANG}..."
            echo "‚è∞ Started at: $(date)"
            
            # Run with timeout and capture exit code
            set +e  # Don't exit on error
            timeout 300 python github_ai_news_digest.py --language ${LANG}
            EXIT_CODE=$?
            set -e  # Re-enable exit on error
            
            echo "‚è∞ Completed at: $(date)"
            echo "üîç Exit code: ${EXIT_CODE}"
            
            # Check exit code
            if [ $EXIT_CODE -eq 124 ]; then
              echo "‚è∞ ${LANG} generation timed out after 5 minutes"
              FAILED_LANGUAGES+=("${LANG} (timeout)")
            elif [ $EXIT_CODE -ne 0 ]; then
              echo "‚ùå ${LANG} generation failed with exit code ${EXIT_CODE}"
              FAILED_LANGUAGES+=("${LANG} (exit ${EXIT_CODE})")
            else
              # Check if files were actually created
              TODAY=$(date +%Y_%m_%d)
              AUDIO_FILE="docs/${LANG}/audio/news_digest_ai_${TODAY}.mp3"
              TEXT_FILE="docs/${LANG}/news_digest_ai_${TODAY}.txt"
              
              if [[ -f "$AUDIO_FILE" && -f "$TEXT_FILE" ]]; then
                echo "‚úÖ ${LANG} generation successful"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                echo "‚ö†Ô∏è ${LANG} generation completed but files missing"
                FAILED_LANGUAGES+=("${LANG} (no files)")
              fi
            fi
            
            echo "---"
          done
        else
          echo "‚ùå Core languages failed - skipping new languages to save time"
          for LANG in "${NEW_LANGUAGES[@]}"; do
            FAILED_LANGUAGES+=("${LANG} (skipped - core failed)")
          done
        fi
        
        # Report results
        TOTAL_LANGUAGES=$((${#CORE_LANGUAGES[@]} + ${#NEW_LANGUAGES[@]}))
        echo "üìä GENERATION SUMMARY:"
        echo "‚úÖ Successful: ${SUCCESS_COUNT}/${TOTAL_LANGUAGES} languages"
        echo "‚úÖ Core languages: ${CORE_SUCCESS_COUNT}/${#CORE_LANGUAGES[@]} (en_GB, fr_FR, de_DE)"
        if [ ${#FAILED_LANGUAGES[@]} -gt 0 ]; then
          echo "‚ùå Failed languages:"
          for failed in "${FAILED_LANGUAGES[@]}"; do
            echo "   - ${failed}"
          done
        fi
        
        # Require all core languages to succeed (en_GB, fr_FR, de_DE)
        if [ $CORE_SUCCESS_COUNT -eq ${#CORE_LANGUAGES[@]} ]; then
          echo "‚úÖ All core languages generated successfully - continuing"
        else
          echo "‚ùå Core language generation failed (${CORE_SUCCESS_COUNT}/${#CORE_LANGUAGES[@]}) - failing CI"
          echo "üí° New languages (es_ES, it_IT, nl_NL, en_GB_LON, en_GB_LIV) are optional and won't fail CI"
          exit 1
        fi
        echo "‚úÖ Digest generation completed"
    
    - name: ‚ö° Skip AI Generation (Cost Optimization)
      if: steps.check_content.outputs.content_exists == 'true' && inputs.force_ai_regeneration != 'true'
      run: |
        echo "üí∞ COST OPTIMIZATION: Skipping AI generation"
        echo "‚úÖ Today's content already exists: ${{ steps.check_content.outputs.today_date }}"
        echo "üìä Estimated savings: \$0.50-\$2.00 per skip"
        echo "üí° Use 'force_ai_regeneration: true' to override if needed"
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "üöÄ Push event: Deploying code improvements without regenerating content"
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          echo "‚è∞ Scheduled event: Content exists, no regeneration needed"
        else
          echo "üîÑ Will redeploy existing content with any improvements"
        fi
    
    - name: üìä Analyze generated content
      run: |
        if [ -f news_digest_ai_*.mp3 ]; then
          echo "üéß Audio file generated successfully"
          ls -lh news_digest_ai_*.mp3
        fi
        if [ -f news_digest_ai_*.txt ]; then
          echo "üìÑ Text file generated successfully"
          wc -w news_digest_ai_*.txt
        fi
    
    - name: üåê Single-page website (no update needed)
      run: |
        echo "üåê Using single-page multi-language website"
        echo "‚úÖ No website update needed - content loaded dynamically"
    
    - name: üì± Verify files in correct locations
      run: |
        # Check if files are in the correct language-specific directories (including cities)
        LANGUAGES=("en_GB" "fr_FR" "de_DE" "es_ES" "it_IT" "nl_NL" "en_GB_LON" "en_GB_LIV")
        
        for LANG in "${LANGUAGES[@]}"; do
          echo "üîç Checking ${LANG} files..."
          
          # Check audio files
          if ls docs/${LANG}/audio/news_digest_ai_*.mp3 1> /dev/null 2>&1; then
            echo "üéß ${LANG} audio files found in correct location:"
            ls -la docs/${LANG}/audio/news_digest_ai_*.mp3
          else
            echo "‚ö†Ô∏è No ${LANG} audio files found in docs/${LANG}/audio/"
          fi
          
          # Check text files
          if ls docs/${LANG}/news_digest_ai_*.txt 1> /dev/null 2>&1; then
            echo "üìÑ ${LANG} text files found in correct location:"
            ls -la docs/${LANG}/news_digest_ai_*.txt
          else
            echo "‚ö†Ô∏è No ${LANG} text files found in docs/${LANG}/"
          fi
        done
        
        # Check for any files in wrong location and move them
        if ls news_digest_ai_*.mp3 1> /dev/null 2>&1; then
          echo "üìÅ Moving audio files from root to en_GB..."
          mkdir -p docs/en_GB/audio
          mv news_digest_ai_*.mp3 docs/en_GB/audio/
        fi
        
        if ls news_digest_ai_*.txt 1> /dev/null 2>&1; then
          echo "üìÅ Moving text files from root to en_GB..."
          mv news_digest_ai_*.txt docs/en_GB/
        fi
    
    - name: üîç Quality check
      run: |
        # Check if files were generated in language-specific directories (including cities)
        LANGUAGES=("en_GB" "fr_FR" "de_DE" "es_ES" "it_IT" "nl_NL" "en_GB_LON" "en_GB_LIV")
        TOTAL_FILES=0
        TOTAL_SIZE=0
        
        for LANG in "${LANGUAGES[@]}"; do
          AUDIO_FILE="docs/${LANG}/audio/news_digest_ai_*.mp3"
          TEXT_FILE="docs/${LANG}/news_digest_ai_*.txt"
          
          if ls $AUDIO_FILE 1> /dev/null 2>&1; then
            # Get the first matching file (there should only be one per language per day)
            audio_file=$(ls $AUDIO_FILE | head -1)
            audio_size=$(stat -c%s "$audio_file")
            TOTAL_SIZE=$((TOTAL_SIZE + audio_size))
            TOTAL_FILES=$((TOTAL_FILES + 1))
            
            if [ $audio_size -lt 100000 ]; then
              echo "‚ö†Ô∏è ${LANG} audio file seems small: ${audio_size} bytes"
            else
              echo "‚úÖ ${LANG} audio file OK: ${audio_size} bytes"
            fi
          else
            echo "‚ö†Ô∏è ${LANG} audio file not found"
          fi
          
          if ls $TEXT_FILE 1> /dev/null 2>&1; then
            echo "‚úÖ ${LANG} text file exists"
          else
            echo "‚ö†Ô∏è ${LANG} text file not found"
          fi
        done
        
        if [ $TOTAL_FILES -eq 0 ]; then
          echo "‚ùå No audio files generated in any language"
          exit 1
        fi
        
        echo "‚úÖ Generated $TOTAL_FILES audio files, total size: $(numfmt --to=iec $TOTAL_SIZE)"
        
        # Check if website was updated
        if [ ! -f docs/index.html ]; then
          echo "‚ùå Website index.html missing"
          exit 1
        fi
        
        echo "‚úÖ Quality checks passed"
    
    - name: üìù Commit generated files
      run: |
        git config --local user.email "ai-digest@github.com"
        git config --local user.name "AI News Digest Bot"
        
        # Add ONLY language-specific files to avoid conflicts
        # This prevents touching the root index.html and other development files
        git add docs/en_GB/ docs/fr_FR/ docs/de_DE/ docs/es_ES/ docs/it_IT/ docs/nl_NL/ docs/en_GB_LON/ docs/en_GB_LIV/ || true
        
        # Also add any files that might be in wrong location (for backward compatibility)
        git add news_digest_ai_*.mp3 news_digest_ai_*.txt 2>/dev/null || true
        
        # Create commit with date and stats
        if git diff --staged --quiet; then
          echo "üí∞ COST OPTIMIZATION: No new files to commit - content already exists"
          echo "üìä Estimated API cost savings: \$0.50-\$2.00"
        else
          # Check if we have audio files to get stats for all languages
          TOTAL_SIZE=0
          LANG_STATS=""
          for LANG in en_GB fr_FR de_DE es_ES it_IT nl_NL en_GB_LON en_GB_LIV; do
            if ls docs/${LANG}/audio/news_digest_ai_*.mp3 1> /dev/null 2>&1; then
              audio_file=$(ls docs/${LANG}/audio/news_digest_ai_*.mp3 | head -1)
              size_bytes=$(stat -c%s "$audio_file")
              size_human=$(numfmt --to=iec $size_bytes)
              TOTAL_SIZE=$((TOTAL_SIZE + size_bytes))
              LANG_STATS="${LANG_STATS}${LANG}: ${size_human} "
            fi
          done
          total_size_human=$(numfmt --to=iec $TOTAL_SIZE)
          git commit -m "ü§ñ Daily AI news digest & website update $(date +%Y-%m-%d)

          üìä Generated: $(date '+%Y-%m-%d %H:%M UTC')
          üéß Audio: ${total_size_human} total (${LANG_STATS})
          ü§ñ AI: Enhanced analysis
          üåê Website: Updated with accessible newspaper layout
          ‚ôø Accessibility: Optimized for visually impaired users"
          
          git push
          echo "‚úÖ Files committed and pushed successfully"
        fi
    
    - name: üì§ Upload artifacts for download
      uses: actions/upload-artifact@v4
      with:
        name: ai-news-digest-${{ github.run_number }}
        path: |
          news_digest_ai_*.mp3
          news_digest_ai_*.txt
          docs/
        retention-days: 90
    
    - name: üè∑Ô∏è Create release for audio file
      if: success() && (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.force_ai_regeneration == 'true'))
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: daily-${{ steps.check_content.outputs.today_date }}
        name: üéß Daily AI News Digest - ${{ steps.check_content.outputs.today_date }}
        body: |
          ü§ñ **AI-Enhanced News Digest**
          üìÖ Generated: ${{ github.event.head_commit.timestamp }}
          
          ### üéØ Features
          - ‚úÖ Claude 4.5 Sonnet AI analysis
          - ‚úÖ Multi-source UK news synthesis  
          - ‚úÖ Irish Emily Neural voice (premium quality)
          - ‚úÖ WhatsApp-ready MP3 format
          - ‚úÖ Copyright-compliant synthesis
          - ‚úÖ Accessible newspaper website
          
          ### üì• Access Options
          - **üåê Website**: [Daily News Digest](https://audionews.uk)
          - **Audio**: `news_digest_ai_*.mp3` - Ready for WhatsApp sharing
          - **Text**: `news_digest_ai_*.txt` - Full transcript with sources
          
          Perfect for visually impaired users! üéß‚ôø
        draft: false
        prerelease: false
        files: |
          news_digest_ai_*.mp3
          news_digest_ai_*.txt
    
    - name: ‚ùå Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Daily AI Digest Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `### ‚ùå AI News Digest Generation Failed
            
            **Run**: ${context.runId}
            **Date**: ${new Date().toISOString()}
            **Workflow**: ${context.workflow}
            
            Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
            
            ### Possible Issues:
            - API key expired or missing
            - Network connectivity issues
            - News source changes
            - Audio generation failure
            - Website update failure
            
            This needs immediate attention for accessibility service continuity.`,
            labels: ['bug', 'ai-digest', 'urgent']
          })

  deploy-website:
    needs: generate-ai-digest
    runs-on: ubuntu-latest
    if: success()
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main  # Deploy from main branch
        lfs: true  # Enable Git LFS checkout
    
    - name: üì¶ Pull LFS files
      run: |
        echo "üîç Checking LFS files before pull..."
        ls -la docs/audio/*.mp3 || echo "No audio files found"
        echo "üîÑ Pulling LFS files..."
        git lfs pull
        echo "‚úÖ LFS files after pull:"
        ls -la docs/audio/*.mp3 || echo "No audio files found"
    
    - name: üîß Setup Pages
      uses: actions/configure-pages@v5
    
    - name: üì¶ Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
    
    - name: üöÄ Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify-completion:
    needs: [generate-ai-digest, deploy-website]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: üéâ Success notification
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "üöÄ Push-triggered deployment completed successfully!"
          echo "üìÖ Date: $(date)"
          echo "üåê Website deployed with UX improvements"
          echo "üí∞ Cost optimized: No unnecessary AI regeneration"
          echo "‚ôø Accessibility service operational"
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          echo "‚è∞ Scheduled daily digest completed successfully!"
          echo "üìÖ Date: $(date)"
          echo "üéß Audio ready for visually impaired users"
          echo "ü§ñ AI analysis completed"
          echo "üåê Accessible website deployed"
          echo "‚ôø Accessibility service operational"
        else
          echo "üîß Manual workflow completed successfully!"
          echo "üìÖ Date: $(date)"
          echo "üéß Audio ready for visually impaired users"
          echo "ü§ñ AI analysis completed"
          echo "üåê Accessible website deployed"
          echo "‚ôø Accessibility service operational"
        fi
        echo ""
        echo "üîó Website: https://audionews.uk"
